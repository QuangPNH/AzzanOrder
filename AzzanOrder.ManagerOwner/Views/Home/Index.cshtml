@{
	ViewData["Title"] = "Home Page";
    @if (ViewBag.Message != null)
    {
        <div class="alert alert-warning">
            @ViewBag.Message
        </div>
    }  
}
@model AzzanOrder.ManagerOwner.Models.Dashbroad
@using AzzanOrder.ManagerOwner.Services
@inject EmployeeService EmployeeService
<div class="container-fluid p-0">

	<div class="row mb-2 mb-xl-3">
		<div class="col-auto d-none d-sm-block">
			<h3><strong>Analytics</strong> Dashboard</h3>
		</div>
	</div>
	<div class="row">
		<div class="col-xl-4 col-xxl-3 d-flex">
			<div class="w-100">
				<div class="row">
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col mt-0">
									<h5 class="card-title">Sales</h5>
								</div>

								<div class="col-auto">
									<div class="stat text-primary">
										<i class="align-middle" data-feather="truck"></i>
									</div>
								</div>
							</div>
							<h1 class="mt-1 mb-3">@Model.numberOfOrder</h1>
							<div class="mb-0">
								<span class="badge badge-primary-light"> <i class="mdi mdi-arrow-bottom-right"></i>@{@Model.PercentileChangeInNumberOfOrder}%</span>
								<span class="text-muted">Since last month</span>
							</div>
						</div>
					</div>
					<div class="card">
						<div class="card-body">
							<div class="row">
								<div class="col mt-0">
									<h5 class="card-title">Employees</h5>
								</div>

								<div class="col-auto">
									<div class="stat text-primary">
										<i class="align-middle" data-feather="users"></i>
									</div>
								</div>
							</div>
							<h1 class="mt-1 mb-3">@Model.numberOfEmployee</h1>
							<div class="mb-0">
								<span class="text-muted">Across</span>
								<span class="badge badge-success-light"> <i class="mdi mdi-arrow-bottom-right"></i> @Model.numberOFManger </span>
								<span class="text-muted">Manager</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="col-xl-8 col-xxl-9">
			<div class="card flex-fill w-100">
				<div class="card-header">
					<h5 class="card-title mb-0">Trending Menu Items</h5>
				</div>
				<div class="card-body pt-2 pb-3">
					<div class="chart chart-sm">
						<canvas id="chartjs-dashboard-line"></canvas>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-xl-12 col-xxl-12">
			<div class="card flex-fill w-100">
				<div class="card-header">
					<h5 class="card-title mb-0">Failing Menu Items</h5>
				</div>
				<div class="card-body pt-2 pb-3">
					<div style="height:250px;overflow-y:scroll">
						<table class="table table-striped">
							<thead>
								<tr>
									<th>Item Name</th>
									<th>Sales</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.failingItems)
								{
									<tr>
										<td>@item.ItemName</td>
										<td>@item.Sales</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12 col-lg-6 col-xxl-6 d-flex">
			<div class="card flex-fill w-100">
				<div class="card-header">
					<h5 class="card-title mb-0">Monthly Sales</h5>
				</div>
				<div class="card-body d-flex w-100">
					<div class="align-self-center chart chart-lg">
						<canvas id="chartjs-dashboard-bar"></canvas>
					</div>
				</div>
			</div>
		</div>
		<div class="col-12 col-lg-6 col-xxl-6 d-flex">
			<div class="card flex-fill w-100">
				<div class="card-header">
					<h5 class="card-title mb-0">Manager Sales</h5>
				</div>
				<div class="card-body d-flex w-100">
					<div class="align-self-center chart chart-lg">
						<canvas id="chartjs-manager-bar"></canvas>
					</div>
				</div>
			</div>
		</div>
	</div>

</div>
<script>
	document.addEventListener("DOMContentLoaded", function () {
		var ctx = document.getElementById("chartjs-dashboard-line").getContext("2d");
		var gradientLight = ctx.createLinearGradient(0, 0, 0, 225);
		gradientLight.addColorStop(0, "rgba(215, 227, 244, 1)");
		gradientLight.addColorStop(1, "rgba(215, 227, 244, 0)");
		var gradientDark = ctx.createLinearGradient(0, 0, 0, 225);
		gradientDark.addColorStop(0, "rgba(51, 66, 84, 1)");
		gradientDark.addColorStop(1, "rgba(51, 66, 84, 0)");
		// Bar chart
		var salesData = @Html.Raw(Json.Serialize(Model.trendingItems?.Select(m => m.Sales) ?? Enumerable.Empty<int>()));
		const maxSales = Math.max(...salesData);
		const stepSize = Math.max(1, Math.ceil(maxSales / 10));
		new Chart(document.getElementById("chartjs-dashboard-line"), {
			type: "bar",
			data: {
				labels: @Html.Raw(Json.Serialize(Model.trendingItems?.Select(m => m.ItemName) ?? Enumerable.Empty<string>())),
				datasets: [{
					label: 'Sales',
					data: salesData,
					backgroundColor: 'rgba(75, 192, 192, 0.2)',
					borderColor: 'rgba(75, 192, 192, 1)',
					borderWidth: 1
				}]
			},
			options: {
				maintainAspectRatio: false,
				legend: {
					display: false
				},
				tooltips: {
					intersect: false
				},
				hover: {
					intersect: true
				},
				plugins: {
					filler: {
						propagate: false
					}
				},
				scales: {
					xAxes: [{
						reverse: true,
						gridLines: {
							color: "rgba(0,0,0,0.0)"
						}
					}],
					yAxes: [{
						ticks: {
							stepSize: stepSize,
							min: 0
						},
						display: true,
						borderDash: [3, 3],
						gridLines: {
							color: "rgba(0,0,0,0.0)",
							fontColor: "#fff"
						}
					}]
				}
			}
		});
	});
</script>
<script>
	async function fetchSalesData() {
		const salesData = [];
		const labels = [];
		const year = new Date().getFullYear();
		const ownerId = @EmployeeService.CurrentOwner.OwnerId;
		for (let month = 1; month <= 12; month++) {
			const startDate = new Date(year, month - 1, 1).toISOString();
			const endDate = new Date(year, month, 0).toISOString();
			const response = await fetch(`https://localhost:7183/api/MenuItem/Sales/${ownerId}/${startDate}/${endDate}`);
			const data = await response.json();
			
			const totalSales = data.reduce((sum, item) => sum + item.sales, 0);
			salesData.push(totalSales);
			labels.push(new Date(year, month - 1).toLocaleString('default', { month: 'long' }));
		}
		return { labels, salesData };
	}

	document.addEventListener("DOMContentLoaded", async function () {
		// Bar chart
		const { labels, salesData } = await fetchSalesData();
		const maxSales = Math.max(...salesData);
		const stepSize = Math.max(1, Math.ceil(maxSales / 10));
		new Chart(document.getElementById("chartjs-dashboard-bar"), {
			type: "bar",
			data: {
				labels: labels,
				datasets: [{
					label: "This year",
					backgroundColor: window.theme.primary,
					borderColor: window.theme.primary,
					hoverBackgroundColor: window.theme.primary,
					hoverBorderColor: window.theme.primary,
					data: salesData,
					barPercentage: .75,
					categoryPercentage: .5
				}]
			},
			options: {
				maintainAspectRatio: false,
				legend: {
					display: false
				},
				scales: {
					yAxes: [{
						gridLines: {
							display: false
						},
						stacked: false,
						ticks: {
							stepSize: stepSize,
							min: 0
						}
					}],
					xAxes: [{
						stacked: false,
						gridLines: {
							color: "transparent"
						}
					}]
				}
			}
		});
	});
</script>

<script>
	async function fetchManagerSalesData() {
		const year = new Date().getFullYear();
		const month = new Date().getMonth() + 1; // Current month
		const startDate = new Date(year, month - 1, 1).toISOString().split('T')[0];
		const endDate = new Date(year, month, 0).toISOString().split('T')[0];
		const ownerId = @EmployeeService.CurrentOwner.OwnerId;
		const response = await fetch(`https://localhost:7183/api/MenuItem/ManagerSales/${ownerId}/${startDate}/${endDate}`);
		const data = await response.json();
		return data;
	}

	document.addEventListener("DOMContentLoaded", async function () {
		// Bar chart
		const salesData = await fetchManagerSalesData();
		const employeeSales = {};

		salesData.forEach(item => {
			if (employeeSales[item.managerName]) {
				employeeSales[item.managerName] += item.sales;
			} else {
				employeeSales[item.managerName] = item.sales;
			}
		});
		const labels = Object.keys(employeeSales);
		const sales = Object.values(employeeSales);
		const maxSales = Math.max(...sales);
		const stepSize = Math.max(1, Math.ceil(maxSales / 10));

		new Chart(document.getElementById("chartjs-manager-bar"), {
			type: "bar",
			data: {
				labels: labels,
				datasets: [{
					label: "This month",
					backgroundColor: window.theme.primary,
					borderColor: window.theme.primary,
					hoverBackgroundColor: window.theme.primary,
					hoverBorderColor: window.theme.primary,
					data: sales,
					barPercentage: .75,
					categoryPercentage: .5
				}]
			},
			options: {
				maintainAspectRatio: false,
				legend: {
					display: false
				},
				scales: {
					yAxes: [{
						gridLines: {
							display: false
						},
						stacked: false,
						ticks: {
							stepSize: stepSize,
							min: 0
						}
					}],
					xAxes: [{
						stacked: false,
						gridLines: {
							color: "transparent"
						}
					}]
				}
			}
		});
	});
</script>

@* <script>
	document.addEventListener("DOMContentLoaded", function () {
		// Pie chart
		new Chart(document.getElementById("chartjs-dashboard-pie"), {
			type: "pie",
			data: {
				labels: ["Chrome", "Firefox", "IE", "Other"],
				datasets: [{
					data: [4306, 3801, 1689, 3251],
					backgroundColor: [
						window.theme.primary,
						window.theme.warning,
						window.theme.danger,
						"#E8EAED"
					],
					borderWidth: 5,
					borderColor: window.theme.white
				}]
			},
			options: {
				responsive: !window.MSInputMethodContext,
				maintainAspectRatio: false,
				legend: {
					display: false
				},
				cutoutPercentage: 70
			}
		});
	});
</script> *@
@* <script>
	document.addEventListener("DOMContentLoaded", function () {
		var date = new Date(Date.now() - 5 * 24 * 60 * 60 * 1000);
		var defaultDate = date.getUTCFullYear() + "-" + (date.getUTCMonth() + 1) + "-" + date.getUTCDate();
		document.getElementById("datetimepicker-dashboard").flatpickr({
			inline: true,
			prevArrow: "<span class=\"fas fa-chevron-left\" title=\"Previous month\"></span>",
			nextArrow: "<span class=\"fas fa-chevron-right\" title=\"Next month\"></span>",
			defaultDate: defaultDate
		});
	});
</script> *@